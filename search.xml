<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>打地鼠</title>
      <link href="/2021/05/27/suan-fa/test/"/>
      <url>/2021/05/27/suan-fa/test/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>目前有一个二维的数组map[m][n],</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h2 id="解决代码"><a href="#解决代码" class="headerlink" title="解决代码"></a>解决代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//打地鼠</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Hamster</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> mps<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">&amp;</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_x<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_y<span class="token punctuation">,</span> <span class="token keyword">int</span> last_dir<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> step<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_step<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> m <span class="token operator">>></span> n <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">+</span> n <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> n <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">>></span><span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">maps</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">>></span> maps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">Hamster</span><span class="token punctuation">(</span>maps<span class="token punctuation">,</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//mps为给定地图，m为dp参照物</span><span class="token keyword">int</span> <span class="token function">Hamster</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span>mps<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">&amp;</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_x<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_y<span class="token punctuation">,</span> <span class="token keyword">int</span> last_dir<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>step<span class="token punctuation">,</span><span class="token keyword">int</span> cur_step<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&amp;</span> row<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&amp;</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_dir<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> new_x <span class="token operator">=</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> cur_x<span class="token punctuation">;</span>            <span class="token keyword">int</span> new_y <span class="token operator">=</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> cur_y<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>new_x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> new_y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> new_x <span class="token operator">>=</span> row <span class="token operator">||</span> new_y <span class="token operator">>=</span> col<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">Hamster</span><span class="token punctuation">(</span>mps<span class="token punctuation">,</span> m<span class="token punctuation">,</span> new_x<span class="token punctuation">,</span> new_y<span class="token punctuation">,</span> i<span class="token punctuation">,</span> step<span class="token punctuation">,</span> cur_step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token operator">+</span>cur_step<span class="token operator">%</span>mps<span class="token punctuation">[</span>cur_x<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_step <span class="token operator">==</span> step<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>cur_x <span class="token operator">==</span> <span class="token punctuation">(</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>cur_y <span class="token operator">==</span> <span class="token punctuation">(</span>col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span>last_dir<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_step<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_x<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> m<span class="token punctuation">[</span>last_dir<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_step<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_x<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">+</span> col <span class="token operator">-</span> cur_x <span class="token operator">-</span> cur_y <span class="token operator">&lt;</span> step <span class="token operator">-</span> cur_step<span class="token punctuation">)</span><span class="token keyword">return</span> m<span class="token punctuation">[</span>last_dir<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_step<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_x<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> last_dir <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> new_x <span class="token operator">=</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> cur_x<span class="token punctuation">;</span>        <span class="token keyword">int</span> new_y <span class="token operator">=</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> cur_y<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>new_x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> new_y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> new_x <span class="token operator">>=</span> row <span class="token operator">||</span> new_y <span class="token operator">>=</span> col<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">Hamster</span><span class="token punctuation">(</span>mps<span class="token punctuation">,</span> m<span class="token punctuation">,</span> new_x<span class="token punctuation">,</span> new_y<span class="token punctuation">,</span> i<span class="token punctuation">,</span> step<span class="token punctuation">,</span> cur_step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span>last_dir<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_step<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_x<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_y<span class="token punctuation">]</span> <span class="token operator">=</span> ans <span class="token operator">+</span> cur_step <span class="token operator">%</span> mps<span class="token punctuation">[</span>cur_x<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how to compile your apache 2.4.47</title>
      <link href="/2021/05/27/pei-zhi-guo-cheng/hello-world/"/>
      <url>/2021/05/27/pei-zhi-guo-cheng/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>在编译apache2.4.47的时候，个人有了很多的问题。所以这里是简明的一个便于去安装的内容，同时也是解决了一些常见的个人问题。</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache </tag>
            
            <tag> httpd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World to Hexo</title>
      <link href="/2020/09/11/hello-world/"/>
      <url>/2020/09/11/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>我的blog很大程度上不算blog，算是个整合贴。我的blog的流程一般是这样的：</p><p>遇到一个实际问题，或者从完全不了解到初步入门，我会保留自己在解决这个问题的浏览器历史搜索记录（请务必科学上网）、大致流程、特殊问题和解决方案。</p><p>一般不再书写别人已经写作的内容，仅仅贴上链接。虽然不排除链接实效的情况，但是一般来说链接是稳定的。万一实在链接失效，也可以搜索关键词找寻更新的教程。在此不再赘述。</p><h2 id="使用Github-Pages和Hexo构建个人博客"><a href="#使用Github-Pages和Hexo构建个人博客" class="headerlink" title="使用Github Pages和Hexo构建个人博客"></a><a href="https://developer.aliyun.com/article/387750">使用Github Pages和Hexo构建个人博客</a></h2><p>此项目是基于gitpage的托管，在本地nodejs平台渲染hexo项目生成的静态网站。</p><p>静态博客文档的书写一方面是记录了博主的工作，另一方面在线分享也节省了有同样问题或者想要了解、从事某方面研究的人的调研时间，一举两得。</p><p>感谢所有愿意分享的博主，你们的无私让整个社区更加美好。</p><h3 id="Valine无后端评论系统"><a href="#Valine无后端评论系统" class="headerlink" title="Valine无后端评论系统"></a><a href="https://valine.js.org/">Valine无后端评论系统</a></h3><p>这是静态网站中不那么静态的部分——评论系统。</p><p>后台存储使用的是LeanCloud。详细配置文档中有细致说明。</p><h2 id="使用jekyll构建gitpage静态网页"><a href="#使用jekyll构建gitpage静态网页" class="headerlink" title="使用jekyll构建gitpage静态网页"></a><a href="https://sspai.com/post/54608">使用jekyll构建gitpage静态网页</a></h2><p>这是另一种实现静态网站的方案，但是jekyll是基于ruby的，对于windows用户可能不是那么友好，所以推荐使用前面的方案。</p><h2 id="Ubuntu安装Node环境"><a href="#Ubuntu安装Node环境" class="headerlink" title="Ubuntu安装Node环境"></a><a href="https://mupceet.com/2020/02/the-best-way-to-install-nodejs/">Ubuntu安装Node环境</a></h2><p>windows下直接安装就OK。这里采用了NVM的Node版本管理来做安装,并使用国内镜像。</p><h3 id="NVM-github"><a href="#NVM-github" class="headerlink" title="NVM github"></a><a href="https://github.com/nvm-sh/nvm#installing-and-updating">NVM github</a></h3><h2 id="仓库主题下载使用"><a href="#仓库主题下载使用" class="headerlink" title="仓库主题下载使用"></a>仓库主题下载使用</h2><p><a href="https://github.com/zkm98/blinkTheme">仓库地址</a>,请参照 readme运行，参照 themes\hexo-theme-matery\README_CN.md 中说明配置详细主题信息.</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitpage </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
